buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '3.1-corda'
        corda_gradle_plugins_version = '3.1.0'
        junit_version = '4.12'
        quasar_version = '0.7.9'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.9.1'
        kotlin_version = '1.1.60'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://jitpack.io' }
    }
}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }

 test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/IntegrationTest/java')
        }
    }
}


configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"


    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"


    // CorDapp dependencies.
    cordapp project(":cordapp-common")
    cordapp project(":cordapp-contracts-states")
    cordapp project(":cordapp-security-buyer")
    cordapp project(":cordapp-security-seller")
    cordapp project(":cordapp-clearing-house")
    cordapp "$corda_release_group:corda-finance:$corda_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=New York,C=US"
        notary = [validating: true]
        p2pPort 10003
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
    }
    node {
        name "O=SecuritySeller,L=New York,C=US"
        p2pPort 10004
        rpcSettings {
            address("0.0.0.0:10006")
            adminAddress("0.0.0.0:10046")
        }
        cordapps = [
                "$corda_release_group:corda-finance:$corda_release_version",
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-common:$project.version",
                "$project.group:cordapp-security-seller:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=SecurityBuyer,L=New York,C=US"
        p2pPort 10005
        rpcSettings {
            address("0.0.0.0:10009")
            adminAddress("0.0.0.0:10049")
        }
        cordapps = [
                "$corda_release_group:corda-finance:$corda_release_version",
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-common:$project.version",
                "$project.group:cordapp-security-buyer:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=ClearingHouse,L=New York,C=US"
        p2pPort 10007
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("0.0.0.0:10412")
        }
        cordapps = [
                "$corda_release_group:corda-finance:$corda_release_version",
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-common:$project.version",
                "$project.group:cordapp-clearing-house:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}